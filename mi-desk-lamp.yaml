# Xiaomi Mi Desk Lamp
substitutions:
  hostname: mi-desk-lamp
  friendly_name: "Mi Desk Lamp"
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  captive_password: !secret captive_password

packages:
  piit79.base:
    url: https://github.com/piit79/esphome-configs
    file: base.yaml
    refresh: always

dashboard_import:
  package_import_url: github://piit79/esphome-configs/mi-desk-lamp.yaml

esphome:
  name: ${hostname}
  project:
    name: "piit79.mi-desk-lamp"
    version: "1.0.1"
  on_boot:
    priority: 600
    then:
      - lambda: |-
          auto max_temp = id(light1).get_traits().get_max_mireds();
          auto call = id(light1).turn_on();
          call.set_brightness(0.15f);
          call.set_color_temperature(max_temp);
          call.perform();
          id(light1).turn_off().perform();

esp8266:
  board: esp_wroom_02

# dallas:
#   - pin: GPIO3

binary_sensor:
  - platform: gpio
    id: encoder_button
    pin:
      number: GPIO2
      inverted: true
    on_click:
      then:
        - light.toggle: light1

sensor:
  - platform: rotary_encoder
    id: rotation
    pin_a: GPIO13
    pin_b: GPIO12
    resolution: 2
    on_value:
      then:
        - if:
            condition:
              # Check if Button is pressed while rotating
              lambda: 'return id(encoder_button).state;'
            then:
              # If Button is pressed, change CW/WW
              - lambda: |-
                  if (!x) {
                    return;
                  }
                  auto min_temp = id(light1).get_traits().get_min_mireds();
                  auto max_temp = id(light1).get_traits().get_max_mireds();
                  auto cur_temp = id(light1).current_values.get_color_temperature();
                  auto new_temp = max(min_temp, min(max_temp, cur_temp + (x * 15)));
                  auto call = id(light1).turn_on();
                  call.set_color_temperature(new_temp);
                  call.perform();
            else:
              # If Button is not pressed, change brightness
              - lambda: |-
                  if (!x) {
                    return;
                  }
                  const float f = 1.11f;
                  const float min_b = 0.03f;
                  float cur_b = id(light1).current_values.is_on() ? id(light1).current_values.get_brightness() : 0.0f;
                  float new_b;
                  if (x > 0) {
                    new_b = max(min(cur_b * f, 1.0f), min_b);
                  } else {
                    new_b = cur_b / f;
                    if (new_b < min_b) {
                      new_b = 0.0f;
                    }
                  }
                  auto call = id(light1).turn_on();
                  call.set_brightness(new_b);
                  call.perform();

        # Reset Rotation to 0
        - sensor.rotary_encoder.set_value:
            id: rotation
            value: 0

  # - platform: dallas
  #   address: 0x13000002C2522428
  #   name: "Temperature"

output:
  - platform: esp8266_pwm
    pin: GPIO4
    id: output_cw

  - platform: esp8266_pwm
    pin: GPIO5
    id: output_ww

light:
  - platform: cwww
    id: light1
    name: None
    icon: phu:yeelight-desklamp
    cold_white: output_cw
    warm_white: output_ww
    cold_white_color_temperature: 6500K
    warm_white_color_temperature: 2700K
    constant_brightness: true
    gamma_correct: 0
    default_transition_length: 0s
