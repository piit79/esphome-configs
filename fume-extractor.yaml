substitutions:
  name: fume-extractor
  friendly_name: Fume Extractor
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  captive_password: !secret captive_password

packages:
  piit79.base:
    url: https://github.com/piit79/esphome-configs
    file: base.yaml
    refresh: always

dashboard_import:
  package_import_url: github://piit79/esphome-configs/fume-extractor.yaml

esphome:
  project:
    name: "piit79.fume-extractor"
    version: "1.0"
  on_boot: 
    then:
      - light.turn_off:
          id: indicator1

esp32:
  board: lolin_c3_mini

globals:
  - id: fan_level_new
    type: int
    restore_value: no
    initial_value: "0"
  - id: diff1
    type: int
    restore_value: no
    initial_value: "0"

binary_sensor:
  - platform: gpio
    id: led_r
    internal: true
    pin:
      number: GPIO1
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 550ms
  - platform: gpio
    id: led_g
    internal: true
    pin:
      number: GPIO2
      mode: INPUT_PULLDOWN
  - platform: gpio
    id: led_b
    internal: true
    pin:
      number: GPIO3
      mode: INPUT_PULLDOWN

sensor:
  - platform: binary_sensor_map
    id: fan_level
    internal: true
    type: sum
    channels:
      - binary_sensor: led_g
        value: 1
      - binary_sensor: led_b
        value: 2
      - binary_sensor: led_r
        value: 3
    filters:
      - lambda: |-
          if (((int)id(fan_level).state == 2) && ((int)x == 0)) {
            // Value 0 can only come after 3
            return {};
          }
          return x;
    on_value:
      - if:
          condition:
            - lambda: 'return x > 0;'
          then:
            - light.turn_on:
                id: indicator1
                brightness: 30%
                red: !lambda |-
                  return (int)x == 3;
                green: !lambda |-
                  return (int)x == 1;
                blue: !lambda |-
                  return (int)x == 2;
          else:
            - light.turn_off:
                id: indicator1
      - lambda: |-
          if (id(diff1) == 0) {
            int spd = (int)x;
            auto fc = id(fan1).make_call();
            fc.set_state(spd > 0);
            fc.set_speed(spd);
            fc.perform();
          } else {
            ESP_LOGD("fan", "on_value: locked (diff=%d)", id(diff1));
          }

output:
  - platform: gpio
    pin:
      number: GPIO6
      inverted: true
      mode: OUTPUT_OPEN_DRAIN
    id: fan_button_out

button:
  - platform: output
    id: fan_button
    name: "Button"
    output: fan_button_out
    duration: 50ms

light:
  - platform: esp32_rmt_led_strip
    id: indicator1
    internal: true
    chipset: ws2812
    rgb_order: GRB
    pin: GPIO7
    rmt_channel: 0
    num_leds: 1
    default_transition_length: 0.2s

fan:
  - platform: template
    id: fan1
    name: "Fan"
    speed_count: 3
    on_state:
      - lambda: |-
          if (id(diff1) > 0) {
            ESP_LOGD("fan", "filter: locked (diff=%d)", id(diff1));
            return;
          }
          int lev_cur = (int)id(fan_level).state;
          int lev_new = x->speed;
          int lev_eff = x->state ? lev_new : 0;
          if (lev_eff != lev_cur) {
            int diff = (lev_eff - lev_cur + 4) % 4;
            if (diff < 0) {
              ESP_LOGD("fan", "on_state: diff = %d is invalid!", diff);
              return;
            }
            id(diff1) = diff;
          }
      - while:
          condition:
            lambda: 'return id(diff1) > 0;'
          then:
            - button.press: fan_button
            - delay: 600ms
            - lambda: 'id(diff1)--;'
